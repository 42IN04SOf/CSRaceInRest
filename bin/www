#!/usr/bin/env node

/**
 * Module dependencies.
 */

var appModule = require('../app');
var debug = require('debug')('create:server');
var http = require('http');
var io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
debug(port);
appModule.app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(appModule.app);
io = io(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// status race - /Race
// waypoint complete - /Race/:id

var socketServer = io.of('/Race').on('connection', function(clientSocket) {	
	// on client disconnect
	clientSocket.on('disconnect', function() {
		// socketServer.emit('toClient', { user: 'server', message: 'A user has disconnected', type: 'global' });
	});
	
	// Emit to all clients
	// socketServer.emit('toClient', { user: 'server', message: 'A user has connected', type: 'global' });
	
	// Emit to new client.
	// clientSocket.emit('toClient', { user: 'server', message: 'Hello new user', type: 'private' });
	
	// receiving from the new client
	clientSocket.on('toServer', function(data) {
		// console.log(data);
	});
	
	clientSocket.on('create', function(room) {
		// join room
		clientSocket.join(room);
		// clientSocket.emit('toClient', { user: 'server', message: 'Welcome to this room, new user.', type: 'room' });
		// socketServer.to(room).emit('toClient', { user: 'server', message: 'A new user has joined the room: ' + room, type: 'room' });
	});
});
appModule.socketEmitter.setGlobalSocket(socketServer);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
